{"version":3,"sources":["../../src/repositories/user.js"],"names":["moment","require","mongoDB","db","index","find","toArray","console","error","store","body","now","unix","hashPassword","password","created_at","updated_at","insertOne","show","id","findOne","_id","ObjectId","update","findOneAndUpdate","destroy","findOneAndDelete","getByEmail","email","bcrypt","genSalt","salt","hash","comparePassword","pass","hashedPassword","compare"],"mappings":";;;;;;AAAA;;;;AACA;;;;;;;;AAEA,IAAMA,SAASC,QAAQ,QAAR,CAAf;AACA,IAAMC,UAAUD,QAAQ,SAAR,CAAhB;;kBAEe,UAACE,EAAD,EAAQ;;AAErB,MAAMC;AAAA,uEAAQ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qBAEG,oBAAUD,EAAV,EAAcE,IAAd,GAAqBC,OAArB,EAFH;;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAIVC,sBAAQC,KAAR;AAJU;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAR;;AAAA;AAAA;AAAA;AAAA,KAAN;;AASA,MAAMC;AAAA,wEAAQ,kBAAOC,IAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEJC,iBAFI,GAEEX,SAASY,IAAT,EAFF;AAAA;AAAA,qBAGYC,aAAaH,KAAKI,QAAlB,CAHZ;;AAAA;AAGVJ,mBAAKI,QAHK;;AAIVJ,mBAAKK,UAAL,GAAkBJ,GAAlB;AACAD,mBAAKM,UAAL,GAAkBL,GAAlB;AALU;AAAA,qBAMG,oBAAUR,EAAV,EAAcc,SAAd,CAAwBP,IAAxB,CANH;;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAQVH,sBAAQC,KAAR;AARU;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAR;;AAAA;AAAA;AAAA;AAAA,KAAN;;AAaA,MAAMU;AAAA,wEAAO,kBAAOC,EAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qBAEI,oBAAUhB,EAAV,EAAciB,OAAd,CAAsB,EAACC,KAAKnB,QAAQoB,QAAR,CAAiBH,EAAjB,CAAN,EAAtB,EAAmD,EAACL,UAAU,CAAX,EAAnD,CAFJ;;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAITP,sBAAQC,KAAR;AAJS;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAP;;AAAA;AAAA;AAAA;AAAA,KAAN;;AASA,MAAMe;AAAA,wEAAS,kBAAOJ,EAAP,EAAWT,IAAX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAELC,iBAFK,GAECX,SAASY,IAAT,EAFD;;AAGXF,mBAAKK,UAAL,GAAkBJ,GAAlB;AACAD,mBAAKM,UAAL,GAAkBL,GAAlB;AAJW;AAAA,qBAKE,oBAAUR,EAAV,EAAcqB,gBAAd,CAA+B,EAACH,KAAKnB,QAAQoB,QAAR,CAAiBH,EAAjB,CAAN,EAA/B,EAA4DT,IAA5D,CALF;;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAOXH,sBAAQC,KAAR;AAPW;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAT;;AAAA;AAAA;AAAA;AAAA,KAAN;;AAYA,MAAMiB;AAAA,wEAAU,kBAAON,EAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qBAEC,oBAAUhB,EAAV,EAAcuB,gBAAd,CAA+B,EAACL,KAAKnB,QAAQoB,QAAR,CAAiBH,EAAjB,CAAN,EAA/B,CAFD;;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAIZZ,sBAAQC,KAAR;AAJY;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAV;;AAAA;AAAA;AAAA;AAAA,KAAN;;AASA,MAAMmB;AAAA,wEAAa,kBAAOC,KAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qBAEF,oBAAUzB,EAAV,EAAciB,OAAd,CAAsB,EAACQ,YAAD,EAAtB,CAFE;;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAIfrB,sBAAQC,KAAR;AAJe;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAb;;AAAA;AAAA;AAAA;AAAA,KAAN;;AASA,MAAMK;AAAA,wEAAe,kBAAOC,QAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qBAEEe,iBAAOC,OAAP,CAAe,EAAf,CAFF;;AAAA;AAEXC,kBAFW;AAAA;AAAA,qBAGJF,iBAAOG,IAAP,CAAYlB,QAAZ,EAAsBiB,IAAtB,CAHI;;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAKjBxB,sBAAQC,KAAR;AALiB;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAf;;AAAA;AAAA;AAAA;AAAA,KAAN;;AAUA,MAAMyB;AAAA,wEAAkB,kBAAOC,IAAP,EAAaC,cAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qBAEPN,iBAAOO,OAAP,CAAeF,IAAf,EAAqBC,cAArB,CAFO;;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAIpB5B,sBAAQC,KAAR;AAJoB;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAlB;;AAAA;AAAA;AAAA;AAAA,KAAN;;AASA,SAAO;AACLJ,gBADK;AAELK,gBAFK;AAGLS,cAHK;AAILK,kBAJK;AAKLE,oBALK;AAMLE,0BANK;AAOLM;AAPK,GAAP;AASD,C","file":"user.js","sourcesContent":["import userModel from '../models/user';\nimport bcrypt from 'bcrypt';\n\nconst moment = require('moment');\nconst mongoDB = require('mongodb');\n\nexport default (db) => {\n\n  const index = async () => {\n    try {\n      return await userModel(db).find().toArray();\n    } catch (err) {\n      console.error(err);\n      throw err;\n    }\n  };\n\n  const store = async (body) => {\n    try {\n      const now = moment().unix();\n      body.password = await hashPassword(body.password);\n      body.created_at = now;\n      body.updated_at = now;\n      return await userModel(db).insertOne(body);\n    } catch (err) {\n      console.error(err);\n      throw err;\n    }\n  };\n\n  const show = async (id) => {\n    try {\n      return await userModel(db).findOne({_id: mongoDB.ObjectId(id)}, {password: 0});\n    } catch (err) {\n      console.error(err);\n      throw err;\n    }\n  };\n\n  const update = async (id, body) => {\n    try {\n      const now = moment().unix();\n      body.created_at = now;\n      body.updated_at = now;\n      return await userModel(db).findOneAndUpdate({_id: mongoDB.ObjectId(id)}, body);\n    } catch (err) {\n      console.error(err);\n      throw err;\n    }\n  };\n\n  const destroy = async (id) => {\n    try {\n      return await userModel(db).findOneAndDelete({_id: mongoDB.ObjectId(id)});\n    } catch (err) {\n      console.error(err);\n      throw err;\n    }\n  };\n\n  const getByEmail = async (email) => {\n    try {\n      return await userModel(db).findOne({email});\n    } catch (err) {\n      console.error(err);\n      throw err;\n    }\n  };\n\n  const hashPassword = async (password) => {\n    try {\n      const salt = await bcrypt.genSalt(10);\n      return await bcrypt.hash(password, salt);\n    } catch (err) {\n      console.error(err);\n      throw err;\n    }\n  };\n\n  const comparePassword = async (pass, hashedPassword) => {\n    try {\n      return await bcrypt.compare(pass, hashedPassword);\n    } catch (err) {\n      console.error(err);\n      throw err;\n    }\n  };\n\n  return {\n    index,\n    store,\n    show,\n    update,\n    destroy,\n    getByEmail,\n    comparePassword\n  };\n}\n"]}