{"version":3,"sources":["../src/index.js"],"names":["require","config","app","use","exposedHeaders","corsHeaders","bodyParser","json","limit","bodyLimit","urlencoded","extended","passport","initialize","seederConfig","database","name","process","env","MONGO_DB","dropDatabase","seeder","Seeder","collections","readCollectionsFromPath","path","resolve","transformers","Transformers","replaceDocumentIdWithUnderscoreId","import","then","console","log","catch","err","dbClient","MongoClient","MONGO_URI","useNewUrlParser","connect","db","error","exit","swaggerOptions","swaggerDefinition","apis","swaggerSpec","get","req","res","setHeader","send","swaggerUi","serve","setup","next","notFound","validate","ValidationError","errors","internalError","listen","PORT"],"mappings":"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","file":"index.js","sourcesContent":["require('dotenv').config();\n\nimport 'babel-polyfill';\nimport express from 'express';\nimport cors from 'cors';\nimport bodyParser from 'body-parser';\nimport {MongoClient} from 'mongodb';\nimport config from './config';\nimport response from './concerns/response';\nimport routes from './routes';\nimport validate from 'express-validation';\nimport {formatValidationErrors} from './concerns/errors';\nimport passport from 'passport';\nimport passportConfig from './passport';\nimport swaggerJSDoc from 'swagger-jsdoc';\nimport swaggerUi from 'swagger-ui-express';\nimport {Seeder} from 'mongo-seeding';\n\nconst app = express();\n\napp.use(cors({\n  exposedHeaders: config.corsHeaders\n}));\n\napp.use(bodyParser.json({\n  limit: config.bodyLimit\n}));\n\napp.use(bodyParser.urlencoded({\n  extended: false\n}));\n\napp.use(passport.initialize());\n\nconst seederConfig = {\n  database: {\n    name: process.env.MONGO_DB,\n  },\n  dropDatabase: true,\n};\nconst seeder = new Seeder(seederConfig);\nconst collections = seeder.readCollectionsFromPath(\n  path.resolve('./seeders'),\n  {\n    transformers: [Seeder.Transformers.replaceDocumentIdWithUnderscoreId],\n  },\n);\n\nseeder.import(collections)\n  .then(() => {\n    console.log('Success');\n  })\n  .catch(err => {\n    console.log('Error', err);\n  });\n\n/**\n * If a connection to the MongoDB is successfull, the API will continue loading\n */\nconst dbClient = new MongoClient(process.env.MONGO_URI, {useNewUrlParser: true});\ndbClient.connect(async (err) => {\n\n  /**\n   * Initializes the database\n   */\n  const db = dbClient.db(process.env.MONGO_DB);\n\n  if (err) {\n    console.error(err);\n    process.exit(0);\n  }\n\n  /**\n   * Configure & initialize swagger documentation\n   */\n  const swaggerOptions = {\n    swaggerDefinition: config.swaggerDefinition,\n    apis: ['./src/controllers/*.js'],\n  };\n  const swaggerSpec = swaggerJSDoc(swaggerOptions);\n  app.get('/swagger.json', function (req, res) {\n    res.setHeader('Content-Type', 'application/json');\n    res.send(swaggerSpec);\n  });\n  app.use('/api-docs', swaggerUi.serve, swaggerUi.setup(swaggerSpec));\n\n  /**\n   * Configure the passport logic\n   */\n  passportConfig(db, passport);\n\n  /**\n   * API router\n   */\n  app.use('/api', routes(db));\n\n  /**\n   * If any request url does not start with /api, the response will be 404\n   */\n  app.use((req, res, next) => {\n    response(res).notFound('Not found');\n  });\n\n  /**\n   * All the errors will be caught here\n   */\n  app.use(function (err, req, res, next) {\n    if (err instanceof validate.ValidationError) {\n      return response(res).error(formatValidationErrors(err.errors));\n    }\n    response(res).internalError('Internal server error');\n  });\n\n  /**\n   * Starts server on the specified port\n   */\n  app.listen(process.env.PORT, () => {\n    console.log(`Started on port ${ process.env.PORT }`);\n  });\n});\n"]}