{"version":3,"sources":["../../src/controllers/reservations.js"],"names":["db","api","Router","get","req","res","index","reservations","collection","transformer","error","post","validationRules","store","body","reservation","ops","item","show","params","id","put","update","delete","destroy"],"mappings":";;;;;;AAAA;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;;;;;kBAEe,UAACA,EAAD,EAAQ;;AAErB,MAAMC,MAAM,IAAIC,eAAJ,EAAZ;;AAEA;;;;;;;;;;;;;;;;;;;;;;;AAuBAD,MAAIE,GAAJ,CAAQ,GAAR;AAAA,uEAAa,iBAAOC,GAAP,EAAYC,GAAZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qBAEkB,4BAAWL,EAAX,EAAeM,KAAf,EAFlB;;AAAA;AAEHC,0BAFG;AAAA,+CAGF,wBAASF,GAAT,EAAcG,UAAd,CAAyBD,YAAzB,EAAuCE,sBAAvC,CAHE;;AAAA;AAAA;AAAA;AAAA,+CAKF,wBAASJ,GAAT,EAAcK,KAAd,aALE;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAb;;AAAA;AAAA;AAAA;AAAA;;AASA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAiCAT,MAAIU,IAAJ,CAAS,GAAT,EAAc,iCAASC,uBAAgBC,KAAzB,CAAd;AAAA,wEAA+C,kBAAOT,GAAP,EAAYC,GAAZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qBAEhB,4BAAWL,EAAX,EAAea,KAAf,CAAqBT,IAAIU,IAAzB,CAFgB;;AAAA;AAErCC,yBAFqC,kBAEgBC,GAFhB;AAAA,gDAGpC,wBAASX,GAAT,EAAcY,IAAd,CAAmBF,WAAnB,EAAgCN,sBAAhC,CAHoC;;AAAA;AAAA;AAAA;AAAA,gDAKpC,wBAASJ,GAAT,EAAcK,KAAd,cALoC;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAA/C;;AAAA;AAAA;AAAA;AAAA;;AASA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA8BAT,MAAIE,GAAJ,CAAQ,MAAR;AAAA,wEAAgB,kBAAOC,GAAP,EAAYC,GAAZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qBAEc,4BAAWL,EAAX,EAAekB,IAAf,CAAoBd,IAAIe,MAAJ,CAAWC,EAA/B,CAFd;;AAAA;AAENL,yBAFM;AAAA,gDAGL,wBAASV,GAAT,EAAcY,IAAd,CAAmBF,WAAnB,EAAgCN,sBAAhC,CAHK;;AAAA;AAAA;AAAA;AAAA,gDAKL,wBAASJ,GAAT,EAAcK,KAAd,cALK;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAhB;;AAAA;AAAA;AAAA;AAAA;;AAUA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA0CAT,MAAIoB,GAAJ,CAAQ,MAAR,EAAgB,iCAAST,uBAAgBU,MAAzB,CAAhB;AAAA,wEAAkD,kBAAOlB,GAAP,EAAYC,GAAZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qBAEpB,4BAAWL,EAAX,EAAesB,MAAf,CAAsBlB,IAAIe,MAAJ,CAAWC,EAAjC,EAAqChB,IAAIU,IAAzC,CAFoB;;AAAA;AAExCC,yBAFwC;AAAA,gDAGvC,wBAASV,GAAT,EAAcY,IAAd,CAAmBF,WAAnB,EAAgCN,sBAAhC,CAHuC;;AAAA;AAAA;AAAA;AAAA,gDAKvC,wBAASJ,GAAT,EAAcK,KAAd,cALuC;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAlD;;AAAA;AAAA;AAAA;AAAA;;AASA;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA4BAT,MAAIsB,MAAJ,CAAW,MAAX;AAAA,wEAAmB,kBAAOnB,GAAP,EAAYC,GAAZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qBAEW,4BAAWL,EAAX,EAAewB,OAAf,CAAuBpB,IAAIe,MAAJ,CAAWC,EAAlC,CAFX;;AAAA;AAETL,yBAFS;AAAA,gDAGR,wBAASV,GAAT,EAAcY,IAAd,CAAmBF,WAAnB,EAAgCN,sBAAhC,CAHQ;;AAAA;AAAA;AAAA;AAAA,gDAKR,wBAASJ,GAAT,EAAcK,KAAd,cALQ;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAnB;;AAAA;AAAA;AAAA;AAAA;;AASA,SAAOT,GAAP;AACD,C","file":"reservations.js","sourcesContent":["import { Router } from 'express';\r\nimport response from '../concerns/response';\r\nimport repository from '../repositories/reservations';\r\nimport validate from 'express-validation';\r\nimport validationRules from '../validation/reservations';\r\nimport transformer from '../transformers/reservations';\r\n\r\nexport default (db) => {\r\n\r\n  const api = new Router();\r\n\r\n  /**\r\n   * List all resources\r\n   * @swagger\r\n   * /api/reservations:\r\n   *   get:\r\n   *     tags:\r\n   *       - Reservations\r\n   *     name: List reservations\r\n   *     summary: Lists all the reservations\r\n   *     security:\r\n   *       - bearerAuth: []\r\n   *     consumes:\r\n   *       - application/json\r\n   *     produces:\r\n   *       - application/json\r\n   *     responses:\r\n   *       200:\r\n   *         description: An array of reservation objects\r\n   *       401:\r\n   *         description: Not authorized to access this resource\r\n   *       422:\r\n   *         description: Unprocessable entity\r\n   */\r\n  api.get('/', async (req, res) => {\r\n    try {\r\n      const reservations = await repository(db).index();\r\n      return response(res).collection(reservations, transformer);\r\n    } catch (err) {\r\n      return response(res).error(err);\r\n    }\r\n  });\r\n\r\n  /**\r\n   * Create a new resource\r\n   * @swagger\r\n   * /api/reservations:\r\n   *   post:\r\n   *     tags:\r\n   *       - Reservations\r\n   *     name: Create reservation\r\n   *     summary: Creates a new reservation\r\n   *     security:\r\n   *       - bearerAuth: []\r\n   *     consumes:\r\n   *       - application/json\r\n   *     produces:\r\n   *       - application/json\r\n   *     parameters:\r\n   *       - name: body\r\n   *         in: body\r\n   *         schema:\r\n   *           type: object\r\n   *           properties:\r\n   *             local_id:\r\n   *               type: integer\r\n   *         required:\r\n   *           - local_id\r\n   *     responses:\r\n   *       200:\r\n   *         description: A reservation object\r\n   *       401:\r\n   *         description: Not authorized to access this resource\r\n   *       422:\r\n   *         description: Unprocessable entity\r\n   */\r\n  api.post('/', validate(validationRules.store), async (req, res) => {\r\n    try {\r\n      const reservation = (await repository(db).store(req.body)).ops;\r\n      return response(res).item(reservation, transformer);\r\n    } catch (err) {\r\n      return response(res).error(err);\r\n    }\r\n  });\r\n\r\n  /**\r\n   * Show an existing resource\r\n   * @swagger\r\n   * /api/reservations/{id}:\r\n   *   get:\r\n   *     tags:\r\n   *       - Reservations\r\n   *     name: Show reservation\r\n   *     summary: Shows an existing reservation\r\n   *     security:\r\n   *       - bearerAuth: []\r\n   *     consumes:\r\n   *       - application/json\r\n   *     produces:\r\n   *       - application/json\r\n   *     parameters:\r\n   *       - name: id\r\n   *         in: path\r\n   *         schema:\r\n   *           type: string\r\n   *         required:\r\n   *           - id\r\n   *     responses:\r\n   *       200:\r\n   *         description: A reservation object\r\n   *       401:\r\n   *         description: Not authorized to access this resource\r\n   *       422:\r\n   *         description: Unprocessable entity\r\n   */\r\n  api.get('/:id', async (req, res) => {\r\n    try {\r\n      const reservation = await repository(db).show(req.params.id);\r\n      return response(res).item(reservation, transformer);\r\n    } catch (err) {\r\n      return response(res).error(err);\r\n    }\r\n\r\n  });\r\n\r\n  /**\r\n   * Update an existing resource\r\n   * @swagger\r\n   * /api/reservations/{id}:\r\n   *   put:\r\n   *     tags:\r\n   *       - Reservations\r\n   *     name: Update reservation\r\n   *     summary: Updates an existing reservation\r\n   *     security:\r\n   *       - bearerAuth: []\r\n   *     consumes:\r\n   *       - application/json\r\n   *     produces:\r\n   *       - application/json\r\n   *     parameters:\r\n   *       - name: body\r\n   *         in: body\r\n   *         schema:\r\n   *           type: object\r\n   *           properties:\r\n   *             name:\r\n   *               type: string\r\n   *             email:\r\n   *               type: string\r\n   *         required:\r\n   *           - name\r\n   *           - email\r\n   *       - name: id\r\n   *         in: path\r\n   *         schema:\r\n   *           type: string\r\n   *         required:\r\n   *           - id\r\n   *     responses:\r\n   *       200:\r\n   *         description: A reservation object\r\n   *       401:\r\n   *         description: Not authorized to access this resource\r\n   *       422:\r\n   *         description: Unprocessable entity\r\n   */\r\n  api.put('/:id', validate(validationRules.update), async (req, res) => {\r\n    try {\r\n      const reservation = await repository(db).update(req.params.id, req.body);\r\n      return response(res).item(reservation, transformer);\r\n    } catch (err) {\r\n      return response(res).error(err);\r\n    }\r\n  });\r\n\r\n  /**\r\n   * Destroy an existing resource\r\n   * @swagger\r\n   * /api/reservations/{id}:\r\n   *   delete:\r\n   *     tags:\r\n   *       - Reservations\r\n   *     name: Delete reservation\r\n   *     summary: Deletes an existing reservation\r\n   *     security:\r\n   *       - bearerAuth: []\r\n   *     consumes:\r\n   *       - application/json\r\n   *     produces:\r\n   *       - application/json\r\n   *     parameters:\r\n   *       - name: id\r\n   *         in: path\r\n   *         schema:\r\n   *           type: string\r\n   *         required:\r\n   *           - id\r\n   *     responses:\r\n   *       200:\r\n   *         description: A reservation object\r\n   *       401:\r\n   *         description: Not authorized to access this resource\r\n   */\r\n  api.delete('/:id', async (req, res) => {\r\n    try {\r\n      const reservation = await repository(db).destroy(req.params.id);\r\n      return response(res).item(reservation, transformer);\r\n    } catch (err) {\r\n      return response(res).error(err);\r\n    }\r\n  });\r\n\r\n  return api;\r\n}\r\n"]}