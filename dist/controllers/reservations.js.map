{"version":3,"sources":["../../src/controllers/reservations.js"],"names":["transporter","nodemailer","createTransport","host","port","auth","user","pass","db","api","Router","get","req","res","index","reservations","collection","transformer","error","post","validationRules","store","body","reservation","ops","resObj","showById","local_id","place","QRCode","toDataURL","_id","err","url","sendMail","from","to","email","subject","name","text","last_name","date","html","item","show","params","id","put","update","console","log","delete","destroy"],"mappings":"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","file":"reservations.js","sourcesContent":["import { Router } from 'express';\r\nimport response from '../concerns/response';\r\nimport repository from '../repositories/reservations';\r\nimport localRepository from '../repositories/localuri';\r\nimport validate from 'express-validation';\r\nimport validationRules from '../validation/reservations';\r\nimport transformer from '../transformers/reservations';\r\nimport nodemailer from 'nodemailer';\r\nimport { emailTemplate } from '../utils';\r\nimport QRCode from 'qrcode';\r\nimport cors from 'cors';\r\nimport schedule from 'node-schedule';\r\nimport moment from 'moment/moment';\r\n\r\nconst transporter = nodemailer.createTransport({\r\n  host: \"smtp.mailtrap.io\",\r\n  port: 2525,\r\n  auth: {\r\n    user: \"9ac93167c76550\",\r\n    pass: \"fddc5c5f4567c4\"\r\n  }\r\n});\r\n\r\nexport default (db) => {\r\n\r\n  const api = new Router();\r\n\r\n  /**\r\n   * List all resources\r\n   * @swagger\r\n   * /api/reservations:\r\n   *   get:\r\n   *     tags:\r\n   *       - Reservations\r\n   *     name: List reservations\r\n   *     summary: Lists all the reservations\r\n   *     security:\r\n   *       - bearerAuth: []\r\n   *     consumes:\r\n   *       - application/json\r\n   *     produces:\r\n   *       - application/json\r\n   *     responses:\r\n   *       200:\r\n   *         description: An array of reservation objects\r\n   *       401:\r\n   *         description: Not authorized to access this resource\r\n   *       422:\r\n   *         description: Unprocessable entity\r\n   */\r\n  api.get('/', async (req, res) => {\r\n    try {\r\n      const reservations = await repository(db).index();\r\n      return response(res).collection(reservations, transformer);\r\n    } catch (err) {\r\n      return response(res).error(err);\r\n    }\r\n  });\r\n\r\n  /**\r\n   * Create a new resource\r\n   * @swagger\r\n   * /api/reservations:\r\n   *   post:\r\n   *     tags:\r\n   *       - Reservations\r\n   *     name: Create reservation\r\n   *     summary: Creates a new reservation\r\n   *     security:\r\n   *       - bearerAuth: []\r\n   *     consumes:\r\n   *       - application/json\r\n   *     produces:\r\n   *       - application/json\r\n   *     parameters:\r\n   *       - name: body\r\n   *         in: body\r\n   *         schema:\r\n   *           type: object\r\n   *           properties:\r\n   *             local_id:\r\n   *               type: integer\r\n   *         required:\r\n   *           - local_id\r\n   *     responses:\r\n   *       200:\r\n   *         description: A reservation object\r\n   *       401:\r\n   *         description: Not authorized to access this resource\r\n   *       422:\r\n   *         description: Unprocessable entity\r\n   */\r\n  api.post('/', cors(), validate(validationRules.store), async (req, res) => {\r\n    try {\r\n      const reservation = (await repository(db).store(req.body)).ops;\r\n\r\n      const resObj =  reservation[0];\r\n      const place = (await localRepository(db).showById(resObj.local_id));\r\n\r\n      QRCode.toDataURL(`https://nice-snail-27.localtunnel.me/reservation/${resObj._id}`, async function (err, url) {\r\n       await transporter.sendMail({\r\n          from: '\"Take-A-Seat\" <reservations@takeaseat.com>', // sender address\r\n          to: resObj.email, // list of receivers\r\n          subject: `TakeASeat Rezervare ${place.name}`, // Subject line\r\n          text: `${resObj.last_name} hai in coace pe data de ${resObj.date}`, // plain text body\r\n          html: emailTemplate(resObj, place, url) // html body\r\n        });\r\n      });\r\n      return response(res).item(resObj, transformer);\r\n    } catch (err) {\r\n      return response(res).error(err);\r\n    }\r\n  });\r\n\r\n  /**\r\n   * Show an existing resource\r\n   * @swagger\r\n   * /api/reservations/{id}:\r\n   *   get:\r\n   *     tags:\r\n   *       - Reservations\r\n   *     name: Show reservation\r\n   *     summary: Shows an existing reservation\r\n   *     security:\r\n   *       - bearerAuth: []\r\n   *     consumes:\r\n   *       - application/json\r\n   *     produces:\r\n   *       - application/json\r\n   *     parameters:\r\n   *       - name: id\r\n   *         in: path\r\n   *         schema:\r\n   *           type: string\r\n   *         required:\r\n   *           - id\r\n   *     responses:\r\n   *       200:\r\n   *         description: A reservation object\r\n   *       401:\r\n   *         description: Not authorized to access this resource\r\n   *       422:\r\n   *         description: Unprocessable entity\r\n   */\r\n  api.get('/:id', async (req, res) => {\r\n    try {\r\n      const reservation = await repository(db).show(req.params.id);\r\n      return response(res).item(reservation, transformer);\r\n    } catch (err) {\r\n      return response(res).error(err);\r\n    }\r\n\r\n  });\r\n\r\n  /**\r\n   * Update an existing resource\r\n   * @swagger\r\n   * /api/reservations/{id}:\r\n   *   put:\r\n   *     tags:\r\n   *       - Reservations\r\n   *     name: Update reservation\r\n   *     summary: Updates an existing reservation\r\n   *     security:\r\n   *       - bearerAuth: []\r\n   *     consumes:\r\n   *       - application/json\r\n   *     produces:\r\n   *       - application/json\r\n   *     parameters:\r\n   *       - name: body\r\n   *         in: body\r\n   *         schema:\r\n   *           type: object\r\n   *           properties:\r\n   *             name:\r\n   *               type: string\r\n   *             email:\r\n   *               type: string\r\n   *         required:\r\n   *           - name\r\n   *           - email\r\n   *       - name: id\r\n   *         in: path\r\n   *         schema:\r\n   *           type: string\r\n   *         required:\r\n   *           - id\r\n   *     responses:\r\n   *       200:\r\n   *         description: A reservation object\r\n   *       401:\r\n   *         description: Not authorized to access this resource\r\n   *       422:\r\n   *         description: Unprocessable entity\r\n   */\r\n  api.put('/:id', validate(validationRules.update), async (req, res) => {\r\n    try {\r\n      console.log(req.params.id, req.body);\r\n      const reservation = await repository(db).update(req.params.id, req.body);\r\n      return response(res).item(reservation, transformer);\r\n    } catch (err) {\r\n      return response(res).error(err);\r\n    }\r\n  });\r\n\r\n  /**\r\n   * Destroy an existing resource\r\n   * @swagger\r\n   * /api/reservations/{id}:\r\n   *   delete:\r\n   *     tags:\r\n   *       - Reservations\r\n   *     name: Delete reservation\r\n   *     summary: Deletes an existing reservation\r\n   *     security:\r\n   *       - bearerAuth: []\r\n   *     consumes:\r\n   *       - application/json\r\n   *     produces:\r\n   *       - application/json\r\n   *     parameters:\r\n   *       - name: id\r\n   *         in: path\r\n   *         schema:\r\n   *           type: string\r\n   *         required:\r\n   *           - id\r\n   *     responses:\r\n   *       200:\r\n   *         description: A reservation object\r\n   *       401:\r\n   *         description: Not authorized to access this resource\r\n   */\r\n  api.delete('/:id', async (req, res) => {\r\n    try {\r\n      const reservation = await repository(db).destroy(req.params.id);\r\n      return response(res).item(reservation, transformer);\r\n    } catch (err) {\r\n      return response(res).error(err);\r\n    }\r\n  });\r\n\r\n  return api;\r\n}\r\n"]}