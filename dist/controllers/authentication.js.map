{"version":3,"sources":["../../src/controllers/authentication.js"],"names":["db","api","Router","post","validationRules","register","req","res","store","body","user","ops","item","transformer","error","login","getByEmail","email","internalError","forbidden","comparePassword","password","passwordMatch","jwt","sign","process","env","AUTH_SECRET","expiresIn","AUTH_EXPIRES_IN","token"],"mappings":";;;;;;AAAA;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;;;;;kBAEe,UAACA,EAAD,EAAQ;;AAErB,MAAMC,MAAM,IAAIC,eAAJ,EAAZ;;AAEA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAsCAD,MAAIE,IAAJ,CAAS,WAAT,EAAsB,iCAASC,yBAAgBC,QAAzB,CAAtB;AAAA,uEAA0D,iBAAOC,GAAP,EAAYC,GAAZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qBAElC,oBAAWP,EAAX,EAAeQ,KAAf,CAAqBF,IAAIG,IAAzB,CAFkC;;AAAA;AAEhDC,kBAFgD,iBAEFC,GAFE,CAEE,CAFF;AAAA,+CAG/C,wBAASJ,GAAT,EAAcK,IAAd,CAAmBF,IAAnB,EAAyBG,cAAzB,CAH+C;;AAAA;AAAA;AAAA;AAAA,+CAK/C,wBAASN,GAAT,EAAcO,KAAd,aAL+C;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAA1D;;AAAA;AAAA;AAAA;AAAA;;AASA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAmCAb,MAAIE,IAAJ,CAAS,QAAT,EAAmB,iCAASC,yBAAgBW,KAAzB,CAAnB;AAAA,wEAAoD,kBAAOT,GAAP,EAAYC,GAAZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAC9CG,kBAD8C;AAAA;AAAA;AAAA,qBAGnC,oBAAWV,EAAX,EAAegB,UAAf,CAA0BV,IAAIG,IAAJ,CAASQ,KAAnC,CAHmC;;AAAA;AAGhDP,kBAHgD;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA,gDAKzC,wBAASH,GAAT,EAAcW,aAAd,CAA4B,oBAA5B,CALyC;;AAAA;AAAA,kBAO7CR,IAP6C;AAAA;AAAA;AAAA;;AAAA,gDAQzC,wBAASH,GAAT,EAAcY,SAAd,CAAwB,2BAAxB,CARyC;;AAAA;AAAA;AAAA;AAAA,qBAYpB,oBAAWnB,EAAX,EAAeoB,eAAf,CAA+Bd,IAAIG,IAAJ,CAASY,QAAxC,EAAkDX,KAAKW,QAAvD,CAZoB;;AAAA;AAY1CC,2BAZ0C;;AAAA,kBAa3CA,aAb2C;AAAA;AAAA;AAAA;;AAAA,gDAcvC,wBAASf,GAAT,EAAcY,SAAd,CAAwB,2BAAxB,CAduC;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA,gDAiBzC,wBAASZ,GAAT,EAAcO,KAAd,cAjByC;;AAAA;AAAA;AAAA;AAAA,qBAqB5BS,uBAAIC,IAAJ,CAASd,IAAT,EAAee,QAAQC,GAAR,CAAYC,WAA3B,EAAwC;AAC1DC,2BAAWH,QAAQC,GAAR,CAAYG;AADmC,eAAxC,CArB4B;;AAAA;AAqB1CC,mBArB0C;AAAA,gDAwBzC,wBAASvB,GAAT,EAAcK,IAAd,CAAmBF,IAAnB,EAAyBG,cAAzB,EAAsC,IAAtC,EAA4C,EAAEiB,YAAF,EAA5C,CAxByC;;AAAA;AAAA;AAAA;AAAA,gDA0BzC,wBAASvB,GAAT,EAAcO,KAAd,cA1ByC;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAApD;;AAAA;AAAA;AAAA;AAAA;;AA8BA,SAAOb,GAAP;AACD,C","file":"authentication.js","sourcesContent":["import { Router } from 'express';\nimport repository from '../repositories/user';\nimport transformer from '../transformers/user';\nimport response from '../concerns/response';\nimport validationRules from '../validation/authentication';\nimport validate from 'express-validation';\nimport jwt from 'jsonwebtoken';\n\nexport default (db) => {\n\n  const api = new Router();\n\n  /**\n   * Registers a user\n   * @swagger\n   * /api/auth/register:\n   *   post:\n   *     tags:\n   *       - Authentication\n   *     name: Register\n   *     summary: Register as a user\n   *     consumes:\n   *       - application/json\n   *     produces:\n   *       - application/json\n   *     parameters:\n   *       - name: body\n   *         in: body\n   *         schema:\n   *           type: object\n   *           properties:\n   *             name:\n   *               type: string\n   *             email:\n   *               type: string\n   *             password:\n   *               type: string\n   *               format: password\n   *         required:\n   *           - name\n   *           - email\n   *           - password\n   *     responses:\n   *       200:\n   *         description: A user object\n   *       403:\n   *         description: Invalid email or password\n   *       422:\n   *         description: Unprocessable entity\n   */\n  api.post('/register', validate(validationRules.register), async (req, res) => {\n    try {\n      const user = (await repository(db).store(req.body)).ops[0];\n      return response(res).item(user, transformer);\n    } catch (err) {\n      return response(res).error(err);\n    }\n  });\n\n  /**\n   * Logs in a user\n   * @swagger\n   * /api/auth/login:\n   *   post:\n   *     tags:\n   *       - Authentication\n   *     name: Log in\n   *     summary: Logs in a user\n   *     consumes:\n   *       - application/json\n   *     produces:\n   *       - application/json\n   *     parameters:\n   *       - name: body\n   *         in: body\n   *         schema:\n   *           type: object\n   *           properties:\n   *             email:\n   *               type: string\n   *             password:\n   *               type: string\n   *               format: password\n   *         required:\n   *           - email\n   *           - password\n   *     responses:\n   *       200:\n   *         description: A user object with a token\n   *       403:\n   *         description: Invalid email or password\n   *       422:\n   *         description: Unprocessable entity\n   */\n  api.post('/login', validate(validationRules.login), async (req, res) => {\n    let user;\n    try {\n      user = await repository(db).getByEmail(req.body.email);\n    } catch (e) {\n      return response(res).internalError('Could not get user');\n    }\n    if (!user) {\n      return response(res).forbidden('Invalid email or password');\n    }\n\n    try {\n      const passwordMatch = await repository(db).comparePassword(req.body.password, user.password);\n      if (!passwordMatch) {\n        return response(res).forbidden('Invalid email or password');\n      }\n    } catch (err) {\n      return response(res).error(err);\n    }\n\n    try {\n      const token = await jwt.sign(user, process.env.AUTH_SECRET, {\n        expiresIn: process.env.AUTH_EXPIRES_IN\n      });\n      return response(res).item(user, transformer, null, { token });\n    } catch (err) {\n      return response(res).error(err);\n    }\n  });\n\n  return api;\n}\n"]}