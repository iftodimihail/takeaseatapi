{"version":3,"sources":["../../src/controllers/users.js"],"names":["db","api","Router","get","req","res","index","users","collection","transformer","error","post","validationRules","store","body","user","ops","item","show","params","id","put","update","delete","destroy"],"mappings":"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","file":"users.js","sourcesContent":["import { Router } from 'express';\nimport response from '../concerns/response';\nimport repository from '../repositories/user';\nimport validate from 'express-validation';\nimport validationRules from '../validation/user';\nimport transformer from '../transformers/user';\n\nexport default (db) => {\n\n  const api = new Router();\n\n  /**\n   * List all resources\n   * @swagger\n   * /api/users:\n   *   get:\n   *     tags:\n   *       - Users\n   *     name: List users\n   *     summary: Lists all the users\n   *     security:\n   *       - bearerAuth: []\n   *     consumes:\n   *       - application/json\n   *     produces:\n   *       - application/json\n   *     responses:\n   *       200:\n   *         description: An array of user objects\n   *       401:\n   *         description: Not authorized to access this resource\n   *       422:\n   *         description: Unprocessable entity\n   */\n  api.get('/', async (req, res) => {\n    try {\n      const users = await repository(db).index();\n      return response(res).collection(users, transformer);\n    } catch (err) {\n      return response(res).error(err);\n    }\n  });\n\n  /**\n   * Create a new resource\n   * @swagger\n   * /api/users:\n   *   post:\n   *     tags:\n   *       - Users\n   *     name: Create user\n   *     summary: Creates a new user\n   *     security:\n   *       - bearerAuth: []\n   *     consumes:\n   *       - application/json\n   *     produces:\n   *       - application/json\n   *     parameters:\n   *       - name: body\n   *         in: body\n   *         schema:\n   *           type: object\n   *           properties:\n   *             name:\n   *               type: string\n   *             email:\n   *               type: string\n   *             password:\n   *               type: string\n   *               format: password\n   *         required:\n   *           - name\n   *           - email\n   *           - password\n   *     responses:\n   *       200:\n   *         description: A user object\n   *       401:\n   *         description: Not authorized to access this resource\n   *       422:\n   *         description: Unprocessable entity\n   */\n  api.post('/', validate(validationRules.store), async (req, res) => {\n    try {\n      const user = (await repository(db).store(req.body)).ops;\n      return response(res).item(user, transformer);\n    } catch (err) {\n      return response(res).error(err);\n    }\n  });\n\n  /**\n   * Show an existing resource\n   * @swagger\n   * /api/users/{id}:\n   *   get:\n   *     tags:\n   *       - Users\n   *     name: Show user\n   *     summary: Shows an existing user\n   *     security:\n   *       - bearerAuth: []\n   *     consumes:\n   *       - application/json\n   *     produces:\n   *       - application/json\n   *     parameters:\n   *       - name: id\n   *         in: path\n   *         schema:\n   *           type: string\n   *         required:\n   *           - id\n   *     responses:\n   *       200:\n   *         description: A user object\n   *       401:\n   *         description: Not authorized to access this resource\n   *       422:\n   *         description: Unprocessable entity\n   */\n  api.get('/:id', async (req, res) => {\n    try {\n      const user = await repository(db).show(req.params.id);\n      return response(res).item(user, transformer);\n    } catch (err) {\n      return response(res).error(err);\n    }\n\n  });\n\n  /**\n   * Update an existing resource\n   * @swagger\n   * /api/users/{id}:\n   *   put:\n   *     tags:\n   *       - Users\n   *     name: Update user\n   *     summary: Updates an existing user\n   *     security:\n   *       - bearerAuth: []\n   *     consumes:\n   *       - application/json\n   *     produces:\n   *       - application/json\n   *     parameters:\n   *       - name: body\n   *         in: body\n   *         schema:\n   *           type: object\n   *           properties:\n   *             name:\n   *               type: string\n   *             email:\n   *               type: string\n   *         required:\n   *           - name\n   *           - email\n   *       - name: id\n   *         in: path\n   *         schema:\n   *           type: string\n   *         required:\n   *           - id\n   *     responses:\n   *       200:\n   *         description: A user object\n   *       401:\n   *         description: Not authorized to access this resource\n   *       422:\n   *         description: Unprocessable entity\n   */\n  api.put('/:id', validate(validationRules.update), async (req, res) => {\n    try {\n      const user = await repository(db).update(req.params.id, req.body);\n      return response(res).item(user, transformer);\n    } catch (err) {\n      return response(res).error(err);\n    }\n  });\n\n  /**\n   * Destroy an existing resource\n   * @swagger\n   * /api/users/{id}:\n   *   delete:\n   *     tags:\n   *       - Users\n   *     name: Delete user\n   *     summary: Deletes an existing user\n   *     security:\n   *       - bearerAuth: []\n   *     consumes:\n   *       - application/json\n   *     produces:\n   *       - application/json\n   *     parameters:\n   *       - name: id\n   *         in: path\n   *         schema:\n   *           type: string\n   *         required:\n   *           - id\n   *     responses:\n   *       200:\n   *         description: A user object\n   *       401:\n   *         description: Not authorized to access this resource\n   */\n  api.delete('/:id', async (req, res) => {\n    try {\n      const user = await repository(db).destroy(req.params.id);\n      return response(res).item(user, transformer);\n    } catch (err) {\n      return response(res).error(err);\n    }\n  });\n\n  return api;\n}\n"]}